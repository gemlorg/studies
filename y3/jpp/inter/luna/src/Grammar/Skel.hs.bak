-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x

transProgram :: Show a => Grammar.Abs.Program' a -> Result
transProgram x = case x of
  Grammar.Abs.PProgram _ stmts -> failure x

transReturnTypeOpt :: Show a => Grammar.Abs.ReturnTypeOpt' a -> Result
transReturnTypeOpt x = case x of
  Grammar.Abs.YReturnType _ type_ -> failure x
  Grammar.Abs.NReturnType _ -> failure x

transTypeOpt :: Show a => Grammar.Abs.TypeOpt' a -> Result
transTypeOpt x = case x of
  Grammar.Abs.YTypeOpt _ type_ -> failure x
  Grammar.Abs.NTypeOpt _ -> failure x

transArg :: Show a => Grammar.Abs.Arg' a -> Result
transArg x = case x of
  Grammar.Abs.AArg _ ident typeopt -> failure x
  Grammar.Abs.AArgVar _ ident typeopt -> failure x

transBlock :: Show a => Grammar.Abs.Block' a -> Result
transBlock x = case x of
  Grammar.Abs.BBlock _ stmts -> failure x

transStmt :: Show a => Grammar.Abs.Stmt' a -> Result
transStmt x = case x of
  Grammar.Abs.Empty _ -> failure x
  Grammar.Abs.BStmt _ block -> failure x
  Grammar.Abs.Decl _ declkind -> failure x
  Grammar.Abs.Ass _ ident expr -> failure x
  Grammar.Abs.Incr _ ident -> failure x
  Grammar.Abs.Decr _ ident -> failure x
  Grammar.Abs.Ret _ expr -> failure x
  Grammar.Abs.VRet _ -> failure x
  Grammar.Abs.Cond _ expr stmt -> failure x
  Grammar.Abs.CondElse _ expr stmt1 stmt2 -> failure x
  Grammar.Abs.While _ expr stmt -> failure x
  Grammar.Abs.For _ stmt1 expr stmt2 block -> failure x
  Grammar.Abs.SExp _ expr -> failure x

transDeclKind :: Show a => Grammar.Abs.DeclKind' a -> Result
transDeclKind x = case x of
  Grammar.Abs.VDecl _ ident typeopt item -> failure x
  Grammar.Abs.FDecl _ ident args returntypeopt block -> failure x

transItem :: Show a => Grammar.Abs.Item' a -> Result
transItem x = case x of
  Grammar.Abs.Init _ expr -> failure x
  Grammar.Abs.NoInit _ -> failure x

transType :: Show a => Grammar.Abs.Type' a -> Result
transType x = case x of
  Grammar.Abs.Nil _ -> failure x
  Grammar.Abs.Bool _ -> failure x
  Grammar.Abs.Int _ -> failure x
  Grammar.Abs.Str _ -> failure x
  Grammar.Abs.Table _ type_ -> failure x
  Grammar.Abs.Any _ -> failure x
  Grammar.Abs.Fun _ types type_ -> failure x

transExpr :: Show a => Grammar.Abs.Expr' a -> Result
transExpr x = case x of
  Grammar.Abs.EVar _ ident -> failure x
  Grammar.Abs.ELitInt _ integer -> failure x
  Grammar.Abs.ELitTrue _ -> failure x
  Grammar.Abs.ELitFalse _ -> failure x
  Grammar.Abs.ENil _ -> failure x
  Grammar.Abs.EAny _ -> failure x
  Grammar.Abs.EApp _ ident exprs -> failure x
  Grammar.Abs.EString _ string -> failure x
  Grammar.Abs.Neg _ expr -> failure x
  Grammar.Abs.Not _ expr -> failure x
  Grammar.Abs.EMul _ expr1 mulop expr2 -> failure x
  Grammar.Abs.EAdd _ expr1 addop expr2 -> failure x
  Grammar.Abs.ERel _ expr1 relop expr2 -> failure x
  Grammar.Abs.EAnd _ expr1 expr2 -> failure x
  Grammar.Abs.EOr _ expr1 expr2 -> failure x
  Grammar.Abs.ELambda _ args returntypeopt block -> failure x

transAddOp :: Show a => Grammar.Abs.AddOp' a -> Result
transAddOp x = case x of
  Grammar.Abs.Plus _ -> failure x
  Grammar.Abs.Minus _ -> failure x

transMulOp :: Show a => Grammar.Abs.MulOp' a -> Result
transMulOp x = case x of
  Grammar.Abs.Times _ -> failure x
  Grammar.Abs.Div _ -> failure x
  Grammar.Abs.Mod _ -> failure x

transRelOp :: Show a => Grammar.Abs.RelOp' a -> Result
transRelOp x = case x of
  Grammar.Abs.LTH _ -> failure x
  Grammar.Abs.LE _ -> failure x
  Grammar.Abs.GTH _ -> failure x
  Grammar.Abs.GE _ -> failure x
  Grammar.Abs.EQU _ -> failure x
  Grammar.Abs.NE _ -> failure x

transMiscOp :: Show a => Grammar.Abs.MiscOp' a -> Result
transMiscOp x = case x of
  Grammar.Abs.CC _ -> failure x
  Grammar.Abs.LEN _ -> failure x
