-- programs ------------------------------------------------

entrypoints Program ;

PProgram.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= "fn" Ident "(" [Arg] ")" ReturnTypeOpt  Block ;

YReturnType. ReturnTypeOpt ::=  "->" Type  ; 
NReturnType. ReturnTypeOpt ::=  ;

YTypeOpt.    TypeOpt ::= ":" Type  ; 
NTypeOpt.    TypeOpt ::=  ;

separator nonempty TopDef "" ;

AArg. 	   Arg ::= Ident TypeOpt ;

AArgVar.   Arg ::= "var" Ident TypeOpt ;

separator  Arg "," ;

-- statements ----------------------------------------------

BBlock.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= "local" Ident TypeOpt Item ";" ;

DeclFun.  Stmt ::= "local" "fn" Ident "(" [Arg] ")" ReturnTypeOpt Block ;

Init.      Item ::= "=" Expr ;

NoInit.    Item ::=  ; 

separator nonempty Item "," ;

Ass.       Stmt ::= Ident TypeOpt "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;
For.       Stmt ::= "for" "(" Ident "=" Expr "," Expr "," Expr ")" Block ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Nil.       Type ::= "nil" ;

Bool.      Type ::= "bool" ;

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Table.     Type ::= "table" "[" Type "]" ;

Any.       Type ::= "any" ;

internal   Fun. Type ::= "(" [Type] ")" "->" Type ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

ENil.      Expr6 ::= "nil" ;

EAny.      Expr6 ::= "any" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ; -- ?

Not.       Expr5 ::= "not" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "and" Expr1 ;

EOr.       Expr ::= Expr1 "or" Expr ;

ELambda.   Expr ::= "fn" "(" [Arg] ")" ReturnTypeOpt Block ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

CC.        MiscOp ::= ".." ;

LEN.       MiscOp ::= "#" ;


-- comments ------------------------------------------------


comment    "--" ;


